# Paxos

This is a Paxos implementation based on R. Renesse's Paxos Made Moderately
Complex.

Project Information
==============================================================================
CS 380D Distributed Computing, Fall 2015

Project 2, Paxos
* Hangchen Yu, UT EID: HY4987, UTCS ID: ZHITINGZ
* Zhiting Zhu, UT EID: ZZ3883, UTCS ID: HYU

Testing the Project
==============================================================================
The source codes are put in `./src`. `COMMAND` file contains a single line
`./src/Master.py` which starts the master of Paxos system. Execute:
```
$ ./tester.py
```

It will test all the input files in `./tests`. The inputs must be named with
extension `.test`. It will compare the output of `Master.py` with the standard
outputs in `./solutions`.

Some Assumptions
==============================================================================
*. 


Modification of Paxos
==============================================================================

Master
------------------------------------------------------------------------------

Server (Node)
------------------------------------------------------------------------------

Client
------------------------------------------------------------------------------

Some Techiques
------------------------------------------------------------------------------

Message Formats
------------------------------------------------------------------------------

Failure Detector
------------------------------------------------------------------------------


Auto Grader
==============================================================================

Using the autograder:

Run "python tester.py" and check your output.

To add your own tests, create a .test file and a .sol file in the tests/ and solutions/ directories respectively.
You can check what your output was in the answers/ directory.

Running tests manually:

To run the sample tests, replace test_name with the name of the test and execute the following command:

cat tests/[test_name].test | $(cat COMMAND)

To automatically check the output:

cat tests/[test_name].test | $(cat COMMAND) > temp_output && diff -q temp_output tests/[test_name].sol

If your output matches the solution, NOTHING will be printed. Otherwise the lines that differ will be shown.
The output for the run of the test will also be stored in a file temp_output after running the second command.
